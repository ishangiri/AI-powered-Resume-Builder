/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as Template3Import } from './routes/Template3'
import { Route as Template2Import } from './routes/Template2'
import { Route as Template1Import } from './routes/Template1'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const Template3Route = Template3Import.update({
  id: '/Template3',
  path: '/Template3',
  getParentRoute: () => rootRoute,
} as any)

const Template2Route = Template2Import.update({
  id: '/Template2',
  path: '/Template2',
  getParentRoute: () => rootRoute,
} as any)

const Template1Route = Template1Import.update({
  id: '/Template1',
  path: '/Template1',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Template1': {
      id: '/Template1'
      path: '/Template1'
      fullPath: '/Template1'
      preLoaderRoute: typeof Template1Import
      parentRoute: typeof rootRoute
    }
    '/Template2': {
      id: '/Template2'
      path: '/Template2'
      fullPath: '/Template2'
      preLoaderRoute: typeof Template2Import
      parentRoute: typeof rootRoute
    }
    '/Template3': {
      id: '/Template3'
      path: '/Template3'
      fullPath: '/Template3'
      preLoaderRoute: typeof Template3Import
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Template1': typeof Template1Route
  '/Template2': typeof Template2Route
  '/Template3': typeof Template3Route
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Template1': typeof Template1Route
  '/Template2': typeof Template2Route
  '/Template3': typeof Template3Route
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Template1': typeof Template1Route
  '/Template2': typeof Template2Route
  '/Template3': typeof Template3Route
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/Template1' | '/Template2' | '/Template3'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Template1' | '/Template2' | '/Template3'
  id: '__root__' | '/' | '/Template1' | '/Template2' | '/Template3'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Template1Route: typeof Template1Route
  Template2Route: typeof Template2Route
  Template3Route: typeof Template3Route
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Template1Route: Template1Route,
  Template2Route: Template2Route,
  Template3Route: Template3Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Template1",
        "/Template2",
        "/Template3"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Template1": {
      "filePath": "Template1.tsx"
    },
    "/Template2": {
      "filePath": "Template2.tsx"
    },
    "/Template3": {
      "filePath": "Template3.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
